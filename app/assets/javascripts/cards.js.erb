$().ready(function() {

   // GENERATED
  var mageMap = {}
  <% for mage in Mage.all %> mageMap['<%= mage.name %>'] = {}; <% end  %>
  <% for ms in MageSchool.all %> mageMap['<%= ms.mage_name %>']['<%= ms.school_name %>'] = <%= ms.cost %>; <% end %>

  var costMap = function() {
    return mageMap[mage()]
  } 

  var deck = {
    entries : {},
    get : function(code) {
      return this.entries[code]
    },
    add : function(card) {
      var card_entry = this.entries[card.code]
      if(!card_entry) {
        card_entry = this.entries[card.code] = {card : $.extend({}, card), amount : 0}
      } 
      card_entry.amount = _.min([card_entry.amount + 1, card_entry.card.user_max()])
      return card_entry
    },
    remove : function(code) {
      delete this.entries[code]
    },
    cost : function() {
      return  _.reduce(this.entries, function(memo, card_entry) {
        return memo + card_entry.amount * card_entry.card.cost()
      }, 0)
    },
    codes : function() {
      return _.keys(this.entries)
    },
    sort : function(field, descending) {
      var collection =  _.sortBy(this.entries, function(entry) {return entry.card[field]}) 
      return descending ? collection.reverse() : collection 
    }
  }
 
  var buildParams = function() {
    return {
      for_type : _.map($("#for_type input:checked"), function(e) {
        return $(e).val()
      }),
      for_school : _.map($("#for_school input:checked"), function(e) {
        return $(e).val()
      })
    }
  }

  var aoDataToMap = function(aoData) {
    return _.reduce(aoData, function(memo, data) {
      memo[data.name] = data.value
      return memo
    }, {})
  }

  var mage = function() {
     return $('input[name="mage"]:checked').val()
  }

  var getUserDeckMaxes = function() {
     return {
       Core: parseInt($('#packs_container select[data-pack=Core]').val()),
       Tome: parseInt($('#packs_container select[data-pack=Tome]').val())
     }
     
  }

  var updateDeckTr = function(tr) {
    var tr = $(tr)
    var card_entry = deck.get(tr.data('code'))

    var max = card_entry.card.user_max()
    var td = $('td.amount', tr).empty()
    if(max === 1) {
      td.text('1') 
    } else {
       var select = $('<select/>').appendTo(td).change(function() {
         var card_entry = deck.get(tr.data('code'))
         card_entry.amount = parseInt($(this).val())
         deckTable.dataTable().fnDraw()
         updateTotalDeckCost()
       })

       for(i = 1; i <= max; i++) {
         var op = $('<option/>').val(i.toString()).text(i).appendTo(select)
         if(i == card_entry.amount) {
            op.attr('selected', 'selected')
         }
       }
    }

    var cost = card_entry.card.cost()

    $('td.cost', tr).text(cost) 
    $('td.total', tr).text(card_entry.amount * cost) 
  }

  var updateListCardCostTr = function(tr) {
    var tr = $(tr)
    var card = $(tr).data('card')
    $('td.cost', tr).text(card.cost())
  }

  var updateListCardMaxTr = function(tr) {
    var tr = $(tr)
    var card = $(tr).data('card')
        
    var user_max = card.user_max()
    var maxText = '' + user_max
    if(user_max != card.deck_max) {
      maxText += '/' + card.deck_max
    }

    $('td.max', tr).text(maxText)
  }

  var updateTotalDeckCost = function(start) {
    $("#total_deck_cost").text(deck.cost())
  }

  var updateAll = function() {
    _.each($('#deck_table tbody tr[data-code]'), updateDeckTr)
    _.each($('#card_list_table tbody tr[data-code]'), updateListCardCostTr)
    updateTotalDeckCost()
  }


  var deckTable = $('#deck_table').dataTable({
    bServerSide: true,
    sPaginationType: 'full_numbers',
    sDom: 'ptil',
    aoColumnDefs: [{
      aTargets:[0],
      mData: function(entry) {
        return "<button class='btn btn-small'><i class='icon-trash'></i></button><a class='card_href' href='#'>" + entry.card.name + "<a>"
      }
    }, {
      aTargets:[1],
      mData: function(entry) {return entry.card.type_name.substring(0,4)},
      sClass: 'small'
    }, {
      aTargets:[2],
      mData: function() {
        return "<select/>"
      },
      sClass:'amount',
      bSortable: false
    }, {
      aTargets:[3],
      mData: function(entry) {return entry.card.cost()},
      sClass: 'cost small',
      bSortable: false
    }, {
      aTargets:[4],
      mData: function(entry) { return entry.card.cost() * entry.amount },
      sClass: 'total small',
      bSortable: false
    }],
    fnServerData: function(sSource, aoData, fnCallback, oSettings) {
      var data = aoDataToMap(aoData)
      switch (data.iSortCol_0) {
        case 0: var sort = 'name'; break
        case 1: var sort = 'type_name'; break
      }

      var results = _.first(_.rest(deck.sort(sort, data.sSortDir_0 === 'desc'), data.iDisplayStart), data.iDisplayLength) 
      var length = deck.codes().length
     

      fnCallback({
        sEcho : data.sEcho,
        iTotalRecords : length,
        iTotalDisplayRecords : length,
        aaData : results
      })
    },
    fnCreatedRow : function(tr, entry, iDataIndex) {
      updateDeckTr($(tr).attr('data-code', entry.card.code))
    } 
  })

  $('#deck_table tbody').on('click', 'tr button',function() {
    var tr = $(this).closest('tr')
    deck.remove(tr.data('code'))
    deckTable.fnDeleteRow(tr[0])
    updateTotalDeckCost()
  })

  $('#dload_button_container button:not(#upload_btn)').click(_.throttle(function() {
    var file_type = $(this).data('dload') 

    $('#deck_mage_name').val(mage())
    $('#input_fields').empty().append(buildCards()).append($('<input type="hidden"/>').attr("name", 'type').val(file_type))

    $('#deck_dload_div').modal()
    

    return false
  }, 2000))

  var buildCards = function() {
     return _.flatten(_.map(deck.sort("name"), function(card_entry, i) {
       var base = 'deck[deck_cards_attributes][]'
       return [
         $('<input type="hidden"/>').attr('name', base + '[card_code]').attr('value', card_entry.card.code),
         $('<input type="hidden"/>').attr('name', base + '[amount]').attr('value', card_entry.amount)
       ]
     }))
  }

  var getUrl = function() {
     var pag = $('.pagination em.current')
     return '/cards?page=' + (pag.length > 0 ? pag.text() : "1")
  }

  $('#mage_select').one('change', 'input', function() {

    var extendCard = function(card) {
      return $.extend({
        cost : function() {
          var cm = costMap()
          var costs =  _.map(card.levels, function(level_detail) {
            return level_detail.level * (card.novice ? 1 : cm[level_detail.school_name])
          })

          return (card.or_cost) ?  _.min(costs) : _.reduce(costs, function(memo, cost) { return memo + cost }, 0) 
        },
        user_max : function() {
          var userDeckMaxes = getUserDeckMaxes() 
          return _.min([card.deck_max, _.reduce(card.packs, function(memo, pack) {
            return memo + pack.amount * userDeckMaxes[pack.pack_name]
          }, 0)])
        }
      }, card)
    }

    var listTable = $("#card_list_table").dataTable({
      bServerSide: true,
      sAjaxSource: '/cards',
      sPaginationType: 'full_numbers',
      sDom: 'fptil',
      aoColumnDefs: [{
        aTargets:[0],
        mData: function(card) {
          return "<button class='btn btn-small'><i class='icon-arrow-left'></i></button>&nbsp<a class='card_href' href='#'>" + card.name + "</a>"
        },
        bSortable:true 
      }, {
        aTargets:[1],
        mData: function(card) {return card.type_name.substring(0,4)},
        sClass: 'small'
      }, {
        aTargets:[2],
        mData: function(card) { return card.cost()},
        sClass:'cost small',
        bSortable:false
      },{ 
        aTargets:[3],
        mData:'deck_max',
        sClass:'max small',
        bSortable:false
      }],
      fnServerData: function(sSource, aoData, fnCallback, oSettings) {
        var data = aoDataToMap(aoData)
        var order = (data.iSortCol_0 == 1 ? 'code ' : 'name ') + data.sSortDir_0

        oSettings.jqXHR = $.ajax({
            dataType: 'json',
            type: 'get',
            url: '/cards',
            data: _.extend({
              echo : data['sEcho'],
              order : order,
              search : data.sSearch,
              per_page : data['iDisplayLength'],
              page : (data['iDisplayStart']/data['iDisplayLength']) + 1
            }, buildParams()),
          success: function(data, textStatus, jqXHR) {

            $('#tables_container').show()

            fnCallback({
              iTotalRecords : <%= Card.count %>,
              iTotalDisplayRecords : data.total_entries,
              sEcho : data.echo,
              aaData : _.map(data.entries, extendCard)
            }, textStatus, jqXHR)
          }
        })
      }, 
      fnCreatedRow : function(tr, card, iDataIndex) {
        var tr = $(tr)
        tr.data('card', card).attr('data-code', card.code)
        updateListCardMaxTr(tr)
      }
    })

    $('#filters_container, #mage_profile_div').show()
    $('#for_type input, #for_school input').change(function() {
      listTable.fnDraw() 
    })

    $('#packs_container select').change(function() {
      _.each($('#card_list_table tbody tr[data-code]'), updateListCardMaxTr)
    })
  })

  $('#mage_select input').change(updateAll)

  $('#card_list_table').on('click', 'tbody tr button', function() {
    var listTr = $(this).closest('tr')
    deck.add(listTr.data('card'))
    deckTable.dataTable().fnDraw()
    updateTotalDeckCost()
  })

  var showCard = _.throttle(function(code) {
    $('<img></img>').attr('src', '/assets/' + code + '.jpg').appendTo($('#card_holder').empty()) 
  }, 1000)

  $('#card_list_table, #deck_table').on('click', 'tbody tr a.card_href', function() {
    showCard($(this).closest('tr').data('code'))
    return false
  })

  var showMage = function(type) {
    type = 'data-' + (type || 'card')
    var path = '/assets/' + $("#mage_holder").attr(type)
    $('<img></img>').attr('src', path).appendTo($('#mage_holder').empty()) 
  } 

  $('#mage_select input').change(function() {
    $('#mage_holder').attr('data-card',$(this).attr('data-card'))
    $('#mage_holder').attr('data-ability',$(this).attr('data-ability'))
    showMage()
  })

  $('#mage_profile_div a').click(function() {
    showMage($(this).attr('data-tab'))
    return false
  })

  $('#upload_btn').click(function() {
    $('#file_upload_div').modal()
  })

  if(window.deck) {
     $("#mage_select input[value='" + deck.mage_name + "']").attr('checked', 'checked').change()
    $("#deck_mage_name").val(deck.mage_name)
    $("#deck_title").val(deck.title)
    $("#deck_description").val(deck.description)
    _.each(window.deck.deck_cards, function(deck_card) {
      var card = $.extend({deck_amount : deck_card.amount}, deck_card.card )
      deckTable.dataTable().fnAddData(card)    
    })
  }

  $('#dload_form').submit(function() {
    $('#deck_dload_div').modal('hide')
  })
})
