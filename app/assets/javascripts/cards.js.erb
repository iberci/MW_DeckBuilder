$().ready(function() {

   // GENERATED
  var mageMap = {}
  <% for mage in Mage.all %> mageMap['<%= mage.name %>'] = {}; <% end  %>
  <% for ms in MageSchool.all %> mageMap['<%= ms.mage_name %>']['<%= ms.school_name %>'] = <%= ms.cost %>; <% end %>

  var buildParams = function() {
    return {
      for_type : _.map($("#for_type input:checked"), function(e) {
        return $(e).val()
      }),
      for_school : _.map($("#for_school input:checked"), function(e) {
        return $(e).val()
      })
    }
  }

  var mage = function() {
     return $('input[name="mage"]:checked').val()
  }

  var updateCardCost = function(card) {
     var costMap = mageMap[mage()]
     var costs =  _.map(card.levels, function(level_detail) {
        return level_detail.level * (card.novice ? 1 : costMap[level_detail.school_name])
     })

     return (card.cost = (card.or_cost) ?  _.min(costs) : _.reduce(costs, function(memo, cost) { return memo + cost }, 0)) 
  }

  var getUserDeckMaxes = function() {
     return {
       Core: parseInt($('#user_decks_container select[data-deck=Core]').val()),
       Tome: parseInt($('#user_decks_container select[data-deck=Tome]').val())
     }
     
  }

  var updateDeckTr = function(tr) {
    var tr = $(tr)
    var card = $(tr).data('card')
    $('td.cost', tr).text(card.cost = updateCardCost(card)) 
    $('td.total', tr).text(card.deck_cost = card.deck_amount * card.cost) 
  }

  var updateListTr = function(tr) {
    var tr = $(tr)
    var card = $(tr).data('card')
    $('td.cost', tr).text(updateCardCost(card))
  }

  var updateTotalDeckCost = function() {
    var total = _.reduce($('#deck_table td.total'), function(memo, td) {
      return memo + parseInt($(td).text())
    },0)
    $("#total_deck_cost").text(total)
    return total
  }

  var updateAllCards = function() {
    _.each($('#deck_table tbody tr[code]'), updateDeckTr)
    _.each($('#card_list_table tbody tr[code]'), updateListTr)
    updateTotalDeckCost()
  }

  var updateCardMax = function(card) {
     userDeckMaxes = getUserDeckMaxes() 
     return (card.user_max = _.reduce(card.decks, function(memo, deck) {
        return memo + deck.amount * userDeckMaxes[deck.deck_name]
     },0))
  }

  var updateListCardMaxTr = function(tr) {
    var tr = $(tr)
    var card = $(tr).data('card')
    updateCardMax(card) 
        
    var maxText = (card.user_max < card.deck_max) ? "" + card.user_max + "/" + card.deck_max : card.deck_max

    $('td.max', tr).text(maxText)
  }

  var updateDeckAmountTr = function(tr) {
    var tr = $(tr)
    var card = $(tr).data('card')
    if(!card.deck_amount) {
       card.deck_amount = 1
    }
    updateCardMax(card) 

    var max = _.min([card.deck_max, card.user_max])
    card.deck_amount = _.min([max, card.deck_amount])
    var td = $('td.amount', tr).empty()
    if(max === 1) {
      td.text('1') 
    } else {
       var select = $('<select/>').appendTo(td).change(function() {
         card.deck_amount = parseInt($(this).val())
         updateDeckTr(tr)
         updateTotalDeckCost()
       })

       for(i = 1; i <= max; i++) {
         var op = $('<option/>').val(i.toString()).text(i).appendTo(select)
         if(i == card.deck_amount) {
            op.attr('selected', 'selected')
         }
       }
    }
    updateDeckTr(tr)
  }

  var updateCardMaxes = function() {
    _.each($('#deck_table tbody tr'), updateDeckAmountTr)
    _.each($("#card_list_table tbody tr"), updateListCardMaxTr)
  }

  $('select.deck_count').change(updateCardMaxes)

  var deckTable = $('#deck_table').dataTable({
    bServerSide: false,
    sPaginationType: 'bootstrap',
    aoColumnDefs: [{
      aTargets:[0],
      mData:'code'
    }, {
      aTargets:[1],
      mData:'name'
    }, {
      aTargets:[2],
      mData: function() {
        return "<select/>"
      },
      sClass:'amount',
      bSortable:false
    }, {
      aTargets:[3],
      mData: 'cost',
      sClass: 'cost'
    }, {
      aTargets:[4],
      mData: 'cost',
      sClass: 'total',
      bSortable:false
    }, {
      aTargets:[5],
      mData: function() {
        return "<button class='btn btn-small'><i class='icon-trash'/></button>"
      }
    }],
    fnCreatedRow : function(tr, aData, iDataIndex) {
      var tr = $(tr).data('card', aData).attr('data-code', aData.code)
      updateDeckAmountTr(tr)
      updateDeckTr(tr)
      updateTotalDeckCost()
    } 
  })

  $('#deck_table tbody').on('click', 'tr button', function() {
    deckTable.fnDeleteRow($(this).closest('tr').index())
    updateTotalDeckCost()
  })

  var getDeckTr = function(code) {
    return $('#deck_table tbody tr[data-code=' + code + ']')
  }

  var deckHasCard = function(code) {
    return getDeckTr(code).length > 0
  }

  $('#dload_button_container button').click(_.throttle(function() {
     var file_type = $(this).data('dload') 

     var form = $('#deck_dload_form')

     $('#input_fields').empty().append(buildCards()).append($('<input type="hidden"/>').attr("name", 'type').val(file_type))
     form.submit()
     return false
  }, 2000))

  var buildCards = function() {
     return _.map($('#deck_table tbody tr'), function(tr) {
       var card = $(tr).data('card')
       var name = 'cards[' + card.code + ']' 
       return $('<input type="hidden"/>').attr('name', name).val(card.deck_amount)
     })
  }


  var getUrl = function() {
     var pag = $('.pagination em.current')
     return '/cards?page=' + (pag.length > 0 ? pag.text() : "1")
  }

  $('#mage_select').one('change', 'input', function() {

    var aoDataToMap = function(aoData) {
      return _.reduce(aoData, function(memo, data) {
        memo[data.name] = data.value
        return memo
      }, {})
    }
 
    var listTable = $("#card_list_table").dataTable({
      bJQueryUI: true,
      bProcessing: true,
      bServerSide: true,
      sAjaxSource: '/cards',
      sPaginationType: 'bootstrap',
      aoColumnDefs: [{
        aTargets:[0],
        bSortable:false,
        mData: function() {
          return "<button class='btn btn-small'><i class='icon-arrow-left'/></button>"
        },
        bSort:false
      }, {
        aTargets:[1],
        mData:'code'
      }, {
        aTargets:[2],
        mData:'name' 
      }, {
        aTargets:[3],
        mData:'cost',
        sClass:'cost'
      },{ 
        aTargets:[4],
        mData:'deck_max',
        sClass:'max'
      }],
      fnServerData: function(sSource, aoData, fnCallback, oSettings) {
        data = aoDataToMap(aoData)
        oSettings.jqXHR = $.ajax({
            dataType: 'json',
            type: 'get',
            url: '/cards',
          data: _.extend({
            echo : data['sEcho'],
            per_page : data['iDisplayLength'],
            page : (data['iDisplayStart']/data['iDisplayLength']) + 1
          }, buildParams()),
          success: function(data, textStatus, jqXHR) {

            $('#tables_container').show()

            $.each(data.entries, function(i, card) {
              updateCardCost(card)
            })
            fnCallback({
              iTotalRecords : data.total_entries,
              iTotalDisplayRecords : _.min([data.total_entries, data.per_page]),
              sEcho : data.echo,
              aaData : data.entries
            }, textStatus, jqXHR)
          }
        })
      }, 
      fnCreatedRow : function(tr, aData, iDataIndex) {
        var tr = $(tr)
        tr.data('card', aData).attr('data-code', aData.code)
        updateListCardMaxTr(tr)
      } 
    })

    $('#filters_container').show()
    $('#for_type input, #for_school input').change(function() {
      listTable.fnDraw() 
    })
  })

  $('#mage_select input').change(updateAllCards)

  $('#card_list_table').on('click', 'tbody tr button', function() {
    var listCard = $(this).closest('tr').data('card')
    if(deckHasCard(listCard.code)) {
      var tr = getDeckTr(listCard.code)
      var card = tr.data('card')
      card.deck_amount = card.deck_amount + 1
      updateDeckAmountTr(tr)
    } else {
      deckTable.dataTable().fnAddData(listCard)
    }
  })
})
